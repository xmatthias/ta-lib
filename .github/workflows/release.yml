on:
  workflow_dispatch:
  push:

  #   tags:
  #     - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Creating release

jobs:
  # Build & test simple source release before wasting hours building and
  # testing the binary build matrix.
  sdist:
    name: "üèó Creating source release"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setting up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Installing python build dependencies
        run: |
          pip install --upgrade pip wheel

      - name: Building source distribution
        run: |
          python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: ta-lib_release-source
          path: dist/*.tar.gz

  # Build the wheels which do not require host emulation.
  build_wheels:
    name: "üèó py${{ matrix.py }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    env:
      CIBW_BUILD: "${{ matrix.py }}-*"
      CIBW_ARCHS_LINUX: auto
      CIBW_ARCHS_MACOS: auto universal2
      CIBW_ARCHS_WINDOWS: auto
      # musllinux builds, but is unstable, see https://github.com/numpy/numpy/pull/21200
      CIBW_SKIP: "*-musllinux_* *_i686"
      # Ensure numpy is installed first to get around a bug with setuptools
      # which causes conflicts when installing eggs.
      CIBW_BEFORE_BUILD: "pip install numpy"
      CIBW_BEFORE_TEST: "pip install -r requirements_test.txt"
      CIBW_TEST_COMMAND: "pytest {project}/tests"
      # Can't test cross-compiled Mac OS builds.
      CIBW_TEST_SKIP: "*_arm64 *_universal2:arm64 *win32 *_i686"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2019, macos-12]
        py: ["cp39", "cp310", "cp311", "cp312",]

    steps:
        - uses: actions/checkout@v4

        - name: Building binary wheels
          uses: pypa/cibuildwheel@v2.22.0

        - uses: actions/upload-artifact@v4
          with:
            name: ta-lib_release-${{ matrix.os }}-${{ matrix.py }}
            path: ./wheelhouse/*.whl

  # Build the wheels which require host emulation.
  # ppc64le compilation works, but is unbelievably slow.
  # We're talking half a day. Ice this until it can be improved.
  # build_emulated_wheels:
  #   name: "üèó py${{ matrix.py }} (${{ matrix.arch }})"
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       py: ["cp38", "cp39", "cp310", "cp311", "cp312"]
  #       arch: [aarch64, ppc64le]

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setting up Qemu for host emulation
  #       uses: docker/setup-qemu-action@v1

  #     - name: Building binary wheels
  #       uses: pypa/cibuildwheel@v2.22.0
  #       env:
  #         CIBW_ARCHS: "${{ matrix.arch }}"
  #         CIBW_BUILD: "${{ matrix.py }}-*"

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ./wheelhouse/*.whl

  build_arm:
    name: "üèó Build armHF wheels via Docker"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.11"]
        platform: ["linux/arm/v7"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Build TA-Lib wheels
      run: |
        docker buildx build -f Dockerfile \
          --platform ${{ matrix.platform }} \
          --build-arg RUN_TESTS=0 \
          --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
          --load \
          -t talib:wheel .

    - name: Extract Wheels from image
      run: |
        docker run --rm -v $(pwd)/assets:/assets \
          --platform ${{ matrix.platform }} \
          talib:wheel \
          cp -r /opt/ta-lib-python/wheels/ /assets/

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ta-lib_release-armv7-${{ matrix.python-version }}
        path: ./assets/wheels/*.whl

  combine-wheels:
    needs: [ sdist, build_wheels, build_arm ]
    runs-on: ubuntu-22.04
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ta-lib_release
          delete-merged: true

  test_wheels:
    needs: [ build_wheels, combine-wheels ]
    name: Test ${{ matrix.python-version }} ${{ matrix.arch }} wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest', 'macos-13']
        python-version: ['3.9', '3.10', '3.11', '3.12']
        arch: ['x64', 'x86']
        exclude:
        - os: 'ubuntu-latest'
          arch: 'x86'
        - os: 'macos-13'
          arch: 'x86'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ta-lib_release
          path: ./wheelhouse/

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}
          allow-prereleases: true

      - name: Install TA-Lib on ${{ matrix.python-version }}
        run: |
          pip install "numpy<2" setuptools
          pip install --no-index --find-links wheelhouse/ TA-Lib
      - name: Run tests on ${{ matrix.python-version }}
        run: |
          python -m talib.abstract

