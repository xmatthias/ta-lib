on:
  workflow_dispatch:
  push:

  #   tags:
  #     - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Creating release

jobs:
  # Build & test simple source release before wasting hours building and
  # testing the binary build matrix.
  sdist:
    name: "🏗 Creating source release"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Installing python build dependencies
        run: |
          pip install --upgrade pip wheel
      - name: Building source distribution
        run: |
          python setup.py sdist
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  # Build the wheels which do not require host emulation.
  build_wheels:
    name: "🏗 py${{ matrix.py }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        # os: [ubuntu-20.04, windows-2019, macos-11]
        # py: ["cp38", "cp39", "cp310"]
        py: ["cp310"]

    steps:
      - uses: actions/checkout@v2

      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install ta-lib binary
        run: |
          bash -v ./tools/build_talib_from_source.bash `pwd`/dependencies

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.9.0

      - name: dummy ls
        run: |
          ls `pwd`/dependencies/include/*

      - name: Building binary wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "${{ matrix.py }}-*"
          CIBW_ARCHS_LINUX: auto
          CIBW_ARCHS_MACOS: auto universal2
          CIBW_ARCHS_WINDOWS: auto
          # musllinux builds, but is unstable, see https://github.com/numpy/numpy/pull/21200
          CIBW_SKIP: "*-musllinux_*"
          # Ensure numpy is installed first to get around a bug with setuptools
          # which causes conflicts when installing eggs.
          CIBW_BEFORE_BUILD: "pip install numpy"
          CIBW_BEFORE_TEST: "pip install pytest flake8 pandas"
          # CIBW_TEST_COMMAND: "pytest {project}"
          CIBW_TEST_COMMAND: "python -m talib.abstract"
          CIBW_ENVIRONMENT: LD_LIBRARY_PATH="`pwd`/dependencies/lib:$LD_LIBRARY_PATH" TA_LIBRARY_PATH="`pwd`/dependencies/lib" TA_INCLUDE_PATH="`pwd`/dependencies/include"
          # Can't test cross-compiled Mac OS builds.
          CIBW_TEST_SKIP: "*_arm64 *_universal2:arm64"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  # Build the wheels which require host emulation.
  # ppc64le compilation works, but is unbelievably slow.
  # We're talking half a day. Ice this until it can be improved.
  # build_emulated_wheels:
  #   name: "🏗 py${{ matrix.py }} (${{ matrix.arch }})"
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       py: ["cp38", "cp39", "cp310"]
  #       arch: [aarch64, ppc64le]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setting up Qemu for host emulation
  #       uses: docker/setup-qemu-action@v1

  #     - name: Building binary wheels
  #       uses: pypa/cibuildwheel@v2.4.0
  #       env:
  #         CIBW_ARCHS: "${{ matrix.arch }}"
  #         CIBW_BUILD: "${{ matrix.py }}-*"

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: ./wheelhouse/*.whl


  test_wheels:
    needs: [ build_wheels ]
    name: Test ${{ matrix.python-version }} ${{ matrix.arch }} wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest']
        python-version: ['3.7', '3.8', '3.9','3.10']
        arch: ['x64', 'x86']
        exclude:
        - os: 'ubuntu-latest'
          arch: 'x86'
        - os: 'macos-latest'
          arch: 'x86'

    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./wheelhouse/

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: Install tables on ${{ matrix.python-version }}
        run: |
          pip install numpy>=1.19.0 numexpr>=2.6.2
          pip install --no-index --find-links wheelhouse/artifact/ ta-lib
      - name: Run tests on ${{ matrix.python-version }}
        run: |
          python -m talib.abstract